#####################################################################
# Macros
#####################################################################

[gcode_macro PRINT_START]
#   Use PRINT_START for the slicer starting script - please customize for your slicer of choice
gcode:
    {% set BED_TEMP = params.BED_TEMP|default(60)|float %}
    {% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(190)|float %}
    SET_LED LED=hotend_rgb RED=1 GREEN=0 BLUE=0
    SET_LED LED=displayStatus RED=0 GREEN=0 BLUE=1
    M140 S{BED_TEMP}

    G32                            ; home all axes

    G90                            ; absolute positioning    
    G1 Z20 F3000                   ; move nozzle away from bed
    M190 S{BED_TEMP}

    M104 S{EXTRUDER_TEMP}
    SMART_PARK
    SET_LED LED=hotend_rgb RED=1 GREEN=1 BLUE=0

    M109 S{EXTRUDER_TEMP}
    SET_LED LED=hotend_rgb RED=1 GREEN=1 BLUE=1
	
	G92 E0
    G1 E4.0 F3600 

    LINE_PURGE # need to reimplement KAMP

    SET_LED LED=displayStatus RED=1 GREEN=0 BLUE=0

   
[gcode_macro PRINT_END]
#   Use PRINT_END for the slicer ending script - please customize for your slicer of choice
gcode:
    M400                           ; wait for buffer to clear
    G92 E0                         ; zero the extruder
    G1 E-6.0 F3600                 ; retract filament
    G91                            ; relative positioning

    #   Get Boundaries
    {% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}
    {% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}
    {% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}

    #   Check end position to determine safe direction to move
    {% if printer.toolhead.position.x < (max_x - 20) %}
        {% set x_safe = 20.0 %}
    {% else %}
        {% set x_safe = -20.0 %}
    {% endif %}

    {% if printer.toolhead.position.y < (max_y - 20) %}
        {% set y_safe = 20.0 %}
    {% else %}
        {% set y_safe = -20.0 %}
    {% endif %}

    {% if printer.toolhead.position.z < (max_z - 2) %}
        {% set z_safe = 2.0 %}
    {% else %}
        {% set z_safe = max_z - printer.toolhead.position.z %}
    {% endif %}

    G0 Z{z_safe} F3600             ; move nozzle up
    G0 X{x_safe} Y{y_safe} F20000  ; move nozzle to remove stringing
    TURN_OFF_HEATERS
    M107                           ; turn off fan
    G90                            ; absolute positioning
    G0 X60 Y0 Z 115 F3600          ; park nozzle at front to avoid gantry droop
    SET_LED LED=displayStatus RED=0 GREEN=1 BLUE=0
    M18

  
[gcode_macro LOAD_FILAMENT]
gcode:
   M83                            ; set extruder to relative
   G1 E30 F300                    ; load
   G1 E15 F150                    ; prime nozzle with filament
   M82                            ; set extruder to absolute
    
[gcode_macro UNLOAD_FILAMENT]
gcode:
   M83                            ; set extruder to relative
   G1 E10 F300                    ; extrude a little to soften tip
   G1 E-40 F1800                  ; retract some, but not too much or it will jam
   M82                            ; set extruder to absolute

[gcode_macro _HOME_X]
gcode:
    # Always use consistent run_current on A/B steppers during sensorless homing
    {% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}
    {% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}
    {% set HOME_CURRENT = 0.5 %} # by default we are dropping the motor current during homing. you can adjust this value if you are having trouble with skipping while homing
    SET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT}
    SET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT}

    # Home
    G28 X
    # Move away
    G91
    G1 X-10 F1200
    
    # Wait just a second… (give StallGuard registers time to clear)
    G4 P1000
    G90
    # Set current during print
    SET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}
    SET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}

[gcode_macro _HOME_Y]
gcode:
    # Set current for sensorless homing
    {% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}
    {% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}
    {% set HOME_CURRENT = 0.5 %} # by default we are dropping the motor current during homing. you can adjust this value if you are having trouble with skipping while homing
    SET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT}
    SET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT}

    # Home
    G28 Y
    # Move away
    G91
    G1 Y-10 F1200

    # Wait just a second… (give StallGuard registers time to clear)
    G4 P1000
    G90
    # Set current during print
    SET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}
    SET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}

[gcode_macro _HOME_Z]
gcode:
    G90
    {% if not 'xy' in printer.toolhead.homed_axes %}
        { action_raise_error("Must Home X and Y Axis First!") }
    {% endif %}
    G1 X60 Y60 F1500
    G28 Z
    G1 Z10

[gcode_macro TEST]
gcode:
    M118 {printer.toolhead.homed_axes}

[homing_override]
axes: xyz
set_position_z: 0
gcode:
   G90
   G0 Z1 F600 # disable to debug homing routines without crashing z
  {% set home_all = 'X' not in params and 'Y' not in params and 'Z' not in params %}

  # due to the potential of ramming a belt if toolhead is at Y0 and homing X, home Y first
  {% if home_all or 'Y' in params %}
    _HOME_Y
  {% endif %}

  {% if home_all or 'X' in params %}
    _HOME_X
  {% endif %}

  ## need to move to safe spot!
  
  {% if home_all or 'Z' in params %}
    _HOME_Z
  {% endif %}

[gcode_macro G32]
gcode:
    SAVE_GCODE_STATE NAME=STATE_G32
    G90
    G28
    QUAD_GANTRY_LEVEL
    G28
    PARK
    RESTORE_GCODE_STATE NAME=STATE_G32

## UNSAFE_MOVE_TOOL
## Move the toolhead without homing
########## Parameters ##########
## X: The X distance to move by (default: 0) mm
## Y: The Y distance to move by (default: 0) mm
## Z: The Z distance to move by (default: 0) mm
## F: The feedrate to use (default: 10) mm/s
# [gcode_macro UNSAFE_MOVE_TOOL]
# description: Move the toolhead without homing
# gcode:
#     {% set z = params.Z|default(0)|float %}
#     {% set x = params.X|default(0)|float %}
#     {% set y = params.Y|default(0)|float %}
#     {% set f = params.F|default(10)|float %}
#     G90
#     SET_KINEMATIC_POSITION Z={(printer.toolhead.axis_maximum.z/2)} X={(printer.toolhead.axis_maximum.x/2)} Y={(printer.toolhead.axis_maximum.y/2)}
#     G0 X{(printer.toolhead.axis_maximum.x/2)+x} Y{(printer.toolhead.axis_maximum.y/2)+y} Z{(printer.toolhead.axis_maximum.z/2)+z} F{ (f*60) }
#     M84

[gcode_macro rasie_a_bit]
description: Raise the Z axis a lil bit
gcode:
    G90
    SET_KINEMATIC_POSITION Z=10.0 X=60.0 Y=60.0
    G0 Z20 F500
    M84


#TODO Adapt
[gcode_macro CLEAN_NOZZLE]
description: Simple X-axis back and forth nozzle wipe performed wipe_count/2 times. Two PARAMETERS are both optional. The LAYER parameter provides the current layer info from your slicer's Layer Change G-code and CLEAN_LAYERS provides the iteration control for how frequently the nozzle procedure is actually performed. Defaults to 1, i.e., every layer. E.g. , CLEAN_NOZZLE LAYER={[layer_num] CLEAN_LAYERS=3 will clean the nozzle every third layer. Omitting the parameters forces the clean to be performed. While wipe_count could be changed to a parameter, once you determine how many wipes are sufficient it's simpler to set its value within the macro and fuhgetaboutit.
gcode:
    {% set layer = params.LAYER|default(0)|int %}; active layer number
    {% set clean_layers = params.CLEAN_LAYERS|default(1)|int %}; perform clean procedure every X layer
    {% if layer%clean_layers == 0 %} #the percent sign performs a modulo math operation, i.e., it calcs the remainder of a division operation
        SAVE_GCODE_STATE NAME=clean_nozzle_state
        {% set wipe_count = 6|int %} # each count is a wipe in one-direction
        {% set y_dir = 0|int %}
        {% if printer.toolhead.position.y > (printer.toolhead.axis_maximum.y - 10) %}: # check for potential nozzle movement interference with bed's edge retaining clips
            {% set y_dir = -1 %}
            {% elif printer.toolhead.position.y < (printer.toolhead.axis_minimum.y + 10) %}
                {% set y_dir = 1 %}
        {% endif %}
        G91
        G0 Z5 # avoid potential nozzle drag across existing print
        G90
        G0 Y{printer.toolhead.position.y|int + 10 * y_dir} # move nozzle away from edge clips
        {% for wipe in range(wipe_count) %} # simple X-axis back-and-forth wipe
            G0 X{235 + (20 * (loop.index is even))}
        {% endfor %}
        RESTORE_GCODE_STATE NAME=clean_nozzle_state MOVE=1
    {% endif %}